%{
  
#include <stdio.h>
#include <string.h>
#include "types.h"
#include "parser.hpp"
  
 #define YY_INPUT(buf,result,max_size)  {\
    result = GetNextChar(buf, max_size); \
    if (  result <= 0  ) \
      result = YY_NULL; \
  }
  
/* [-()<>=*+/;{}.\n\^]           { return *yytext; } */
/* void yyerror(char *); */
/* for testing from http://www.ibm.com/developerworks/library/l-lex.html */
/* "["  {yylval.langReserve = new string(yytext); return LBRKT;} */
/* "]"  {yylval.langReserve = new string(yytext); return RBRKT;} */
%}

chars [A-za-z]
number ([0-9])+
delim [" "\n\t]
whitespace {delim}+
words {chars}+

%%
[0-9]+              { yylval.valInt = atoi(yytext); return INTEGER; }
[0-9]*"."[0-9]+     { yylval.valFloat=atof(yytext); return FLOAT; }
"int" {yylval.typeName = new string(yytext); return VARTYPE;}
"float" {yylval.typeName = new string(yytext); return VARTYPE;}
"void" {yylval.typeName = new string(yytext); return VARTYPE;}
"int[]" {yylval.typeName = new string(yytext); return VARTYPE;}
"float[]" {yylval.typeName = new string(yytext); return VARTYPE;}
"load" {yylval.langReserve = new string(yytext); return EXT_FUN_LOAD;}
"function" {yylval.langReserve = new string(yytext); return FUNCTION;}
"for" {yylval.langReserve = new string(yytext); return FOR;}
"if" {yylval.langReserve = new string(yytext); return IF;}
">=" {yylval.langReserve = new string(yytext); return GEQ;}
"<=" {yylval.langReserve = new string(yytext); return LEQ;}

[ \t\n]					;
[-()<>=*+/:;,\[\]{}\^.]           { return *yytext; }

[a-zA-Z_][a-zA-Z0-9_]*   {
  yylval.varName = new string(yytext);
                return VARIABLE;
            }


[ \t]+   ;       /* skip whitespace */

%%

/* [\[\]]                  { printf("Found %s\n",yytext); return *yytext;} */
/*[\n]+ ; /*skip newlines*/
/* .               yyerror("Unknown character");  */

int yywrap(void) {
   return 1;
}


/* mode: c */
