Terminals which are not used

   LBRKT
   RBRKT


State 84 conflicts: 9 shift/reduce
State 85 conflicts: 9 shift/reduce
State 86 conflicts: 9 shift/reduce


Grammar

    0 $accept: program "end of file"

    1 program: stmts
    2        | program func_decl

    3 func_decl: FUNCTION VARTYPE VARIABLE '(' func_decl_args ')' block

    4 func_decl_args: /* empty */
    5               | var_decl
    6               | func_decl_args ',' var_decl

    7 block: '{' stmts '}'

    8 if_statement: IF exp block

    9 for_loop: FOR VARIABLE '=' range block

   10 stmts: stmt
   11      | stmts stmt

   12 stmt: var_decl ';'
   13     | exp ';'
   14     | EXT_FUN_LOAD VARTYPE VARIABLE '(' type_list ')' ';'
   15     | if_statement
   16     | for_loop
   17     | RETURN exp ';'

   18 type_list: /* empty */
   19          | VARTYPE
   20          | type_list ',' VARTYPE

   21 var_decl: VARTYPE VARIABLE '=' exp
   22         | VARTYPE VARIABLE '=' range
   23         | VARTYPE VARIABLE
   24         | VARIABLE '=' exp
   25         | VARIABLE '=' range
   26         | VARIABLE '[' exp ']' '=' exp

   27 range: exp ':' exp ':' exp
   28      | exp ':' exp
   29      | '[' range ']'

   30 exp: VARIABLE
   31    | VARIABLE '[' exp ']'
   32    | FLOAT
   33    | INTEGER
   34    | exp '+' exp
   35    | exp '-' exp
   36    | exp '*' exp
   37    | exp '*' '.' exp
   38    | exp '/' exp
   39    | exp '/' '.' exp
   40    | exp '<' exp
   41    | exp '>' exp
   42    | exp GEQ exp
   43    | exp LEQ exp
   44    | '-' exp
   45    | exp '^' exp
   46    | exp '^' '.' exp
   47    | '(' exp ')'
   48    | VARIABLE '(' call_args ')'

   49 call_args: /* empty */
   50          | exp
   51          | call_args ',' exp


Terminals, with rules where they appear

"end of file" (0) 0
'(' (40) 3 14 47 48
')' (41) 3 14 47 48
'*' (42) 36 37
'+' (43) 34
',' (44) 6 20 51
'-' (45) 35 44
'.' (46) 37 39 46
'/' (47) 38 39
':' (58) 27 28
';' (59) 12 13 14 17
'<' (60) 40
'=' (61) 9 21 22 24 25 26
'>' (62) 41
'[' (91) 26 29 31
']' (93) 26 29 31
'^' (94) 45 46
'{' (123) 7
'}' (125) 7
error (256)
FLOAT (258) 32
INTEGER (259) 33
VARIABLE (260) 3 9 14 21 22 23 24 25 26 30 31 48
VARTYPE (261) 3 14 19 20 21 22 23
EXT_FUN_LOAD (262) 14
LEQ (263) 43
GEQ (264) 42
IF (265) 8
LBRKT (266)
RBRKT (267)
FOR (268) 9
FUNCTION (269) 3
RETURN (270) 17
NEG (271)


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
program (36)
    on left: 1 2, on right: 0 2
func_decl (37)
    on left: 3, on right: 2
func_decl_args (38)
    on left: 4 5 6, on right: 3 6
block (39)
    on left: 7, on right: 3 8 9
if_statement (40)
    on left: 8, on right: 15
for_loop (41)
    on left: 9, on right: 16
stmts (42)
    on left: 10 11, on right: 1 7 11
stmt (43)
    on left: 12 13 14 15 16 17, on right: 10 11
type_list (44)
    on left: 18 19 20, on right: 14 20
var_decl (45)
    on left: 21 22 23 24 25 26, on right: 5 6 12
range (46)
    on left: 27 28 29, on right: 9 22 25 29
exp (47)
    on left: 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
    48, on right: 8 13 17 21 24 26 27 28 31 34 35 36 37 38 39 40 41
    42 43 44 45 46 47 50 51
call_args (48)
    on left: 49 50 51, on right: 48 51


state 0

    0 $accept: . program "end of file"

    FLOAT         shift, and go to state 1
    INTEGER       shift, and go to state 2
    VARIABLE      shift, and go to state 3
    VARTYPE       shift, and go to state 4
    EXT_FUN_LOAD  shift, and go to state 5
    IF            shift, and go to state 6
    FOR           shift, and go to state 7
    RETURN        shift, and go to state 8
    '-'           shift, and go to state 9
    '('           shift, and go to state 10

    program       go to state 11
    if_statement  go to state 12
    for_loop      go to state 13
    stmts         go to state 14
    stmt          go to state 15
    var_decl      go to state 16
    exp           go to state 17


state 1

   32 exp: FLOAT .

    $default  reduce using rule 32 (exp)


state 2

   33 exp: INTEGER .

    $default  reduce using rule 33 (exp)


state 3

   24 var_decl: VARIABLE . '=' exp
   25         | VARIABLE . '=' range
   26         | VARIABLE . '[' exp ']' '=' exp
   30 exp: VARIABLE .
   31    | VARIABLE . '[' exp ']'
   48    | VARIABLE . '(' call_args ')'

    '='  shift, and go to state 18
    '('  shift, and go to state 19
    '['  shift, and go to state 20

    $default  reduce using rule 30 (exp)


state 4

   21 var_decl: VARTYPE . VARIABLE '=' exp
   22         | VARTYPE . VARIABLE '=' range
   23         | VARTYPE . VARIABLE

    VARIABLE  shift, and go to state 21


state 5

   14 stmt: EXT_FUN_LOAD . VARTYPE VARIABLE '(' type_list ')' ';'

    VARTYPE  shift, and go to state 22


state 6

    8 if_statement: IF . exp block

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 24


state 7

    9 for_loop: FOR . VARIABLE '=' range block

    VARIABLE  shift, and go to state 25


state 8

   17 stmt: RETURN . exp ';'

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 26


state 9

   44 exp: '-' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 27


state 10

   47 exp: '(' . exp ')'

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 28


state 11

    0 $accept: program . "end of file"
    2 program: program . func_decl

    "end of file"  shift, and go to state 29
    FUNCTION       shift, and go to state 30

    func_decl  go to state 31


state 12

   15 stmt: if_statement .

    $default  reduce using rule 15 (stmt)


state 13

   16 stmt: for_loop .

    $default  reduce using rule 16 (stmt)


state 14

    1 program: stmts .
   11 stmts: stmts . stmt

    FLOAT         shift, and go to state 1
    INTEGER       shift, and go to state 2
    VARIABLE      shift, and go to state 3
    VARTYPE       shift, and go to state 4
    EXT_FUN_LOAD  shift, and go to state 5
    IF            shift, and go to state 6
    FOR           shift, and go to state 7
    RETURN        shift, and go to state 8
    '-'           shift, and go to state 9
    '('           shift, and go to state 10

    $default  reduce using rule 1 (program)

    if_statement  go to state 12
    for_loop      go to state 13
    stmt          go to state 32
    var_decl      go to state 16
    exp           go to state 17


state 15

   10 stmts: stmt .

    $default  reduce using rule 10 (stmts)


state 16

   12 stmt: var_decl . ';'

    ';'  shift, and go to state 33


state 17

   13 stmt: exp . ';'
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42
    ';'  shift, and go to state 43


state 18

   24 var_decl: VARIABLE '=' . exp
   25         | VARIABLE '=' . range

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10
    '['       shift, and go to state 44

    range  go to state 45
    exp    go to state 46


state 19

   48 exp: VARIABLE '(' . call_args ')'

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    $default  reduce using rule 49 (call_args)

    exp        go to state 47
    call_args  go to state 48


state 20

   26 var_decl: VARIABLE '[' . exp ']' '=' exp
   31 exp: VARIABLE '[' . exp ']'

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 49


state 21

   21 var_decl: VARTYPE VARIABLE . '=' exp
   22         | VARTYPE VARIABLE . '=' range
   23         | VARTYPE VARIABLE .

    '='  shift, and go to state 50

    $default  reduce using rule 23 (var_decl)


state 22

   14 stmt: EXT_FUN_LOAD VARTYPE . VARIABLE '(' type_list ')' ';'

    VARIABLE  shift, and go to state 51


state 23

   30 exp: VARIABLE .
   31    | VARIABLE . '[' exp ']'
   48    | VARIABLE . '(' call_args ')'

    '('  shift, and go to state 19
    '['  shift, and go to state 52

    $default  reduce using rule 30 (exp)


state 24

    8 if_statement: IF exp . block
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42
    '{'  shift, and go to state 53

    block  go to state 54


state 25

    9 for_loop: FOR VARIABLE . '=' range block

    '='  shift, and go to state 55


state 26

   17 stmt: RETURN exp . ';'
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42
    ';'  shift, and go to state 56


state 27

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   44    | '-' exp .
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    '^'  shift, and go to state 42

    $default  reduce using rule 44 (exp)

    Conflict between rule 44 and token LEQ resolved as reduce (LEQ < NEG).
    Conflict between rule 44 and token GEQ resolved as reduce (GEQ < NEG).
    Conflict between rule 44 and token '<' resolved as reduce ('<' < NEG).
    Conflict between rule 44 and token '>' resolved as reduce ('>' < NEG).
    Conflict between rule 44 and token '-' resolved as reduce ('-' < NEG).
    Conflict between rule 44 and token '+' resolved as reduce ('+' < NEG).
    Conflict between rule 44 and token '*' resolved as reduce ('*' < NEG).
    Conflict between rule 44 and token '/' resolved as reduce ('/' < NEG).
    Conflict between rule 44 and token '^' resolved as shift (NEG < '^').


state 28

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp
   47    | '(' exp . ')'

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42
    ')'  shift, and go to state 57


state 29

    0 $accept: program "end of file" .

    $default  accept


state 30

    3 func_decl: FUNCTION . VARTYPE VARIABLE '(' func_decl_args ')' block

    VARTYPE  shift, and go to state 58


state 31

    2 program: program func_decl .

    $default  reduce using rule 2 (program)


state 32

   11 stmts: stmts stmt .

    $default  reduce using rule 11 (stmts)


state 33

   12 stmt: var_decl ';' .

    $default  reduce using rule 12 (stmt)


state 34

   43 exp: exp LEQ . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 59


state 35

   42 exp: exp GEQ . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 60


state 36

   40 exp: exp '<' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 61


state 37

   41 exp: exp '>' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 62


state 38

   35 exp: exp '-' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 63


state 39

   34 exp: exp '+' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 64


state 40

   36 exp: exp '*' . exp
   37    | exp '*' . '.' exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10
    '.'       shift, and go to state 65

    exp  go to state 66


state 41

   38 exp: exp '/' . exp
   39    | exp '/' . '.' exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10
    '.'       shift, and go to state 67

    exp  go to state 68


state 42

   45 exp: exp '^' . exp
   46    | exp '^' . '.' exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10
    '.'       shift, and go to state 69

    exp  go to state 70


state 43

   13 stmt: exp ';' .

    $default  reduce using rule 13 (stmt)


state 44

   29 range: '[' . range ']'

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10
    '['       shift, and go to state 44

    range  go to state 71
    exp    go to state 72


state 45

   25 var_decl: VARIABLE '=' range .

    $default  reduce using rule 25 (var_decl)


state 46

   24 var_decl: VARIABLE '=' exp .
   27 range: exp . ':' exp ':' exp
   28      | exp . ':' exp
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42
    ':'  shift, and go to state 73

    $default  reduce using rule 24 (var_decl)


state 47

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp
   50 call_args: exp .

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    $default  reduce using rule 50 (call_args)


state 48

   48 exp: VARIABLE '(' call_args . ')'
   51 call_args: call_args . ',' exp

    ')'  shift, and go to state 74
    ','  shift, and go to state 75


state 49

   26 var_decl: VARIABLE '[' exp . ']' '=' exp
   31 exp: VARIABLE '[' exp . ']'
   34    | exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42
    ']'  shift, and go to state 76


state 50

   21 var_decl: VARTYPE VARIABLE '=' . exp
   22         | VARTYPE VARIABLE '=' . range

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10
    '['       shift, and go to state 44

    range  go to state 77
    exp    go to state 78


state 51

   14 stmt: EXT_FUN_LOAD VARTYPE VARIABLE . '(' type_list ')' ';'

    '('  shift, and go to state 79


state 52

   31 exp: VARIABLE '[' . exp ']'

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 80


state 53

    7 block: '{' . stmts '}'

    FLOAT         shift, and go to state 1
    INTEGER       shift, and go to state 2
    VARIABLE      shift, and go to state 3
    VARTYPE       shift, and go to state 4
    EXT_FUN_LOAD  shift, and go to state 5
    IF            shift, and go to state 6
    FOR           shift, and go to state 7
    RETURN        shift, and go to state 8
    '-'           shift, and go to state 9
    '('           shift, and go to state 10

    if_statement  go to state 12
    for_loop      go to state 13
    stmts         go to state 81
    stmt          go to state 15
    var_decl      go to state 16
    exp           go to state 17


state 54

    8 if_statement: IF exp block .

    $default  reduce using rule 8 (if_statement)


state 55

    9 for_loop: FOR VARIABLE '=' . range block

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10
    '['       shift, and go to state 44

    range  go to state 82
    exp    go to state 72


state 56

   17 stmt: RETURN exp ';' .

    $default  reduce using rule 17 (stmt)


state 57

   47 exp: '(' exp ')' .

    $default  reduce using rule 47 (exp)


state 58

    3 func_decl: FUNCTION VARTYPE . VARIABLE '(' func_decl_args ')' block

    VARIABLE  shift, and go to state 83


state 59

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   43    | exp LEQ exp .
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    $default  reduce using rule 43 (exp)

    Conflict between rule 43 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 43 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 43 and token '<' resolved as reduce (%left '<').
    Conflict between rule 43 and token '>' resolved as reduce (%left '>').
    Conflict between rule 43 and token '-' resolved as shift (LEQ < '-').
    Conflict between rule 43 and token '+' resolved as shift (LEQ < '+').
    Conflict between rule 43 and token '*' resolved as shift (LEQ < '*').
    Conflict between rule 43 and token '/' resolved as shift (LEQ < '/').
    Conflict between rule 43 and token '^' resolved as shift (LEQ < '^').


state 60

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   42    | exp GEQ exp .
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    $default  reduce using rule 42 (exp)

    Conflict between rule 42 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 42 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 42 and token '<' resolved as reduce (%left '<').
    Conflict between rule 42 and token '>' resolved as reduce (%left '>').
    Conflict between rule 42 and token '-' resolved as shift (GEQ < '-').
    Conflict between rule 42 and token '+' resolved as shift (GEQ < '+').
    Conflict between rule 42 and token '*' resolved as shift (GEQ < '*').
    Conflict between rule 42 and token '/' resolved as shift (GEQ < '/').
    Conflict between rule 42 and token '^' resolved as shift (GEQ < '^').


state 61

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   40    | exp '<' exp .
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    $default  reduce using rule 40 (exp)

    Conflict between rule 40 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 40 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 40 and token '<' resolved as reduce (%left '<').
    Conflict between rule 40 and token '>' resolved as reduce (%left '>').
    Conflict between rule 40 and token '-' resolved as shift ('<' < '-').
    Conflict between rule 40 and token '+' resolved as shift ('<' < '+').
    Conflict between rule 40 and token '*' resolved as shift ('<' < '*').
    Conflict between rule 40 and token '/' resolved as shift ('<' < '/').
    Conflict between rule 40 and token '^' resolved as shift ('<' < '^').


state 62

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   41    | exp '>' exp .
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    $default  reduce using rule 41 (exp)

    Conflict between rule 41 and token LEQ resolved as reduce (%left LEQ).
    Conflict between rule 41 and token GEQ resolved as reduce (%left GEQ).
    Conflict between rule 41 and token '<' resolved as reduce (%left '<').
    Conflict between rule 41 and token '>' resolved as reduce (%left '>').
    Conflict between rule 41 and token '-' resolved as shift ('>' < '-').
    Conflict between rule 41 and token '+' resolved as shift ('>' < '+').
    Conflict between rule 41 and token '*' resolved as shift ('>' < '*').
    Conflict between rule 41 and token '/' resolved as shift ('>' < '/').
    Conflict between rule 41 and token '^' resolved as shift ('>' < '^').


state 63

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   35    | exp '-' exp .
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    $default  reduce using rule 35 (exp)

    Conflict between rule 35 and token LEQ resolved as reduce (LEQ < '-').
    Conflict between rule 35 and token GEQ resolved as reduce (GEQ < '-').
    Conflict between rule 35 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 35 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 35 and token '-' resolved as reduce (%left '-').
    Conflict between rule 35 and token '+' resolved as reduce (%left '+').
    Conflict between rule 35 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 35 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 35 and token '^' resolved as shift ('-' < '^').


state 64

   34 exp: exp . '+' exp
   34    | exp '+' exp .
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    $default  reduce using rule 34 (exp)

    Conflict between rule 34 and token LEQ resolved as reduce (LEQ < '+').
    Conflict between rule 34 and token GEQ resolved as reduce (GEQ < '+').
    Conflict between rule 34 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 34 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 34 and token '-' resolved as reduce (%left '-').
    Conflict between rule 34 and token '+' resolved as reduce (%left '+').
    Conflict between rule 34 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 34 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 34 and token '^' resolved as shift ('+' < '^').


state 65

   37 exp: exp '*' '.' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 84


state 66

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   36    | exp '*' exp .
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    '^'  shift, and go to state 42

    $default  reduce using rule 36 (exp)

    Conflict between rule 36 and token LEQ resolved as reduce (LEQ < '*').
    Conflict between rule 36 and token GEQ resolved as reduce (GEQ < '*').
    Conflict between rule 36 and token '<' resolved as reduce ('<' < '*').
    Conflict between rule 36 and token '>' resolved as reduce ('>' < '*').
    Conflict between rule 36 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 36 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 36 and token '*' resolved as reduce (%left '*').
    Conflict between rule 36 and token '/' resolved as reduce (%left '/').
    Conflict between rule 36 and token '^' resolved as shift ('*' < '^').


state 67

   39 exp: exp '/' '.' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 85


state 68

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   38    | exp '/' exp .
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    '^'  shift, and go to state 42

    $default  reduce using rule 38 (exp)

    Conflict between rule 38 and token LEQ resolved as reduce (LEQ < '/').
    Conflict between rule 38 and token GEQ resolved as reduce (GEQ < '/').
    Conflict between rule 38 and token '<' resolved as reduce ('<' < '/').
    Conflict between rule 38 and token '>' resolved as reduce ('>' < '/').
    Conflict between rule 38 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 38 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 38 and token '*' resolved as reduce (%left '*').
    Conflict between rule 38 and token '/' resolved as reduce (%left '/').
    Conflict between rule 38 and token '^' resolved as shift ('/' < '^').


state 69

   46 exp: exp '^' '.' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 86


state 70

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   45    | exp '^' exp .
   46    | exp . '^' '.' exp

    '^'  shift, and go to state 42

    $default  reduce using rule 45 (exp)

    Conflict between rule 45 and token LEQ resolved as reduce (LEQ < '^').
    Conflict between rule 45 and token GEQ resolved as reduce (GEQ < '^').
    Conflict between rule 45 and token '<' resolved as reduce ('<' < '^').
    Conflict between rule 45 and token '>' resolved as reduce ('>' < '^').
    Conflict between rule 45 and token '-' resolved as reduce ('-' < '^').
    Conflict between rule 45 and token '+' resolved as reduce ('+' < '^').
    Conflict between rule 45 and token '*' resolved as reduce ('*' < '^').
    Conflict between rule 45 and token '/' resolved as reduce ('/' < '^').
    Conflict between rule 45 and token '^' resolved as shift (%right '^').


state 71

   29 range: '[' range . ']'

    ']'  shift, and go to state 87


state 72

   27 range: exp . ':' exp ':' exp
   28      | exp . ':' exp
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42
    ':'  shift, and go to state 73


state 73

   27 range: exp ':' . exp ':' exp
   28      | exp ':' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 88


state 74

   48 exp: VARIABLE '(' call_args ')' .

    $default  reduce using rule 48 (exp)


state 75

   51 call_args: call_args ',' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 89


state 76

   26 var_decl: VARIABLE '[' exp ']' . '=' exp
   31 exp: VARIABLE '[' exp ']' .

    '='  shift, and go to state 90

    $default  reduce using rule 31 (exp)


state 77

   22 var_decl: VARTYPE VARIABLE '=' range .

    $default  reduce using rule 22 (var_decl)


state 78

   21 var_decl: VARTYPE VARIABLE '=' exp .
   27 range: exp . ':' exp ':' exp
   28      | exp . ':' exp
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42
    ':'  shift, and go to state 73

    $default  reduce using rule 21 (var_decl)


state 79

   14 stmt: EXT_FUN_LOAD VARTYPE VARIABLE '(' . type_list ')' ';'

    VARTYPE  shift, and go to state 91

    $default  reduce using rule 18 (type_list)

    type_list  go to state 92


state 80

   31 exp: VARIABLE '[' exp . ']'
   34    | exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42
    ']'  shift, and go to state 93


state 81

    7 block: '{' stmts . '}'
   11 stmts: stmts . stmt

    FLOAT         shift, and go to state 1
    INTEGER       shift, and go to state 2
    VARIABLE      shift, and go to state 3
    VARTYPE       shift, and go to state 4
    EXT_FUN_LOAD  shift, and go to state 5
    IF            shift, and go to state 6
    FOR           shift, and go to state 7
    RETURN        shift, and go to state 8
    '-'           shift, and go to state 9
    '('           shift, and go to state 10
    '}'           shift, and go to state 94

    if_statement  go to state 12
    for_loop      go to state 13
    stmt          go to state 32
    var_decl      go to state 16
    exp           go to state 17


state 82

    9 for_loop: FOR VARIABLE '=' range . block

    '{'  shift, and go to state 53

    block  go to state 95


state 83

    3 func_decl: FUNCTION VARTYPE VARIABLE . '(' func_decl_args ')' block

    '('  shift, and go to state 96


state 84

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   37    | exp '*' '.' exp .
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    LEQ       [reduce using rule 37 (exp)]
    GEQ       [reduce using rule 37 (exp)]
    '<'       [reduce using rule 37 (exp)]
    '>'       [reduce using rule 37 (exp)]
    '-'       [reduce using rule 37 (exp)]
    '+'       [reduce using rule 37 (exp)]
    '*'       [reduce using rule 37 (exp)]
    '/'       [reduce using rule 37 (exp)]
    '^'       [reduce using rule 37 (exp)]
    $default  reduce using rule 37 (exp)


state 85

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   39    | exp '/' '.' exp .
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    LEQ       [reduce using rule 39 (exp)]
    GEQ       [reduce using rule 39 (exp)]
    '<'       [reduce using rule 39 (exp)]
    '>'       [reduce using rule 39 (exp)]
    '-'       [reduce using rule 39 (exp)]
    '+'       [reduce using rule 39 (exp)]
    '*'       [reduce using rule 39 (exp)]
    '/'       [reduce using rule 39 (exp)]
    '^'       [reduce using rule 39 (exp)]
    $default  reduce using rule 39 (exp)


state 86

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp
   46    | exp '^' '.' exp .

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    LEQ       [reduce using rule 46 (exp)]
    GEQ       [reduce using rule 46 (exp)]
    '<'       [reduce using rule 46 (exp)]
    '>'       [reduce using rule 46 (exp)]
    '-'       [reduce using rule 46 (exp)]
    '+'       [reduce using rule 46 (exp)]
    '*'       [reduce using rule 46 (exp)]
    '/'       [reduce using rule 46 (exp)]
    '^'       [reduce using rule 46 (exp)]
    $default  reduce using rule 46 (exp)


state 87

   29 range: '[' range ']' .

    $default  reduce using rule 29 (range)


state 88

   27 range: exp ':' exp . ':' exp
   28      | exp ':' exp .
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42
    ':'  shift, and go to state 97

    $default  reduce using rule 28 (range)


state 89

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp
   51 call_args: call_args ',' exp .

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    $default  reduce using rule 51 (call_args)


state 90

   26 var_decl: VARIABLE '[' exp ']' '=' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 98


state 91

   19 type_list: VARTYPE .

    $default  reduce using rule 19 (type_list)


state 92

   14 stmt: EXT_FUN_LOAD VARTYPE VARIABLE '(' type_list . ')' ';'
   20 type_list: type_list . ',' VARTYPE

    ')'  shift, and go to state 99
    ','  shift, and go to state 100


state 93

   31 exp: VARIABLE '[' exp ']' .

    $default  reduce using rule 31 (exp)


state 94

    7 block: '{' stmts '}' .

    $default  reduce using rule 7 (block)


state 95

    9 for_loop: FOR VARIABLE '=' range block .

    $default  reduce using rule 9 (for_loop)


state 96

    3 func_decl: FUNCTION VARTYPE VARIABLE '(' . func_decl_args ')' block

    VARIABLE  shift, and go to state 101
    VARTYPE   shift, and go to state 4

    $default  reduce using rule 4 (func_decl_args)

    func_decl_args  go to state 102
    var_decl        go to state 103


state 97

   27 range: exp ':' exp ':' . exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 104


state 98

   26 var_decl: VARIABLE '[' exp ']' '=' exp .
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    $default  reduce using rule 26 (var_decl)


state 99

   14 stmt: EXT_FUN_LOAD VARTYPE VARIABLE '(' type_list ')' . ';'

    ';'  shift, and go to state 105


state 100

   20 type_list: type_list ',' . VARTYPE

    VARTYPE  shift, and go to state 106


state 101

   24 var_decl: VARIABLE . '=' exp
   25         | VARIABLE . '=' range
   26         | VARIABLE . '[' exp ']' '=' exp

    '='  shift, and go to state 18
    '['  shift, and go to state 107


state 102

    3 func_decl: FUNCTION VARTYPE VARIABLE '(' func_decl_args . ')' block
    6 func_decl_args: func_decl_args . ',' var_decl

    ')'  shift, and go to state 108
    ','  shift, and go to state 109


state 103

    5 func_decl_args: var_decl .

    $default  reduce using rule 5 (func_decl_args)


state 104

   27 range: exp ':' exp ':' exp .
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42

    $default  reduce using rule 27 (range)


state 105

   14 stmt: EXT_FUN_LOAD VARTYPE VARIABLE '(' type_list ')' ';' .

    $default  reduce using rule 14 (stmt)


state 106

   20 type_list: type_list ',' VARTYPE .

    $default  reduce using rule 20 (type_list)


state 107

   26 var_decl: VARIABLE '[' . exp ']' '=' exp

    FLOAT     shift, and go to state 1
    INTEGER   shift, and go to state 2
    VARIABLE  shift, and go to state 23
    '-'       shift, and go to state 9
    '('       shift, and go to state 10

    exp  go to state 110


state 108

    3 func_decl: FUNCTION VARTYPE VARIABLE '(' func_decl_args ')' . block

    '{'  shift, and go to state 53

    block  go to state 111


state 109

    6 func_decl_args: func_decl_args ',' . var_decl

    VARIABLE  shift, and go to state 101
    VARTYPE   shift, and go to state 4

    var_decl  go to state 112


state 110

   26 var_decl: VARIABLE '[' exp . ']' '=' exp
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   37    | exp . '*' '.' exp
   38    | exp . '/' exp
   39    | exp . '/' '.' exp
   40    | exp . '<' exp
   41    | exp . '>' exp
   42    | exp . GEQ exp
   43    | exp . LEQ exp
   45    | exp . '^' exp
   46    | exp . '^' '.' exp

    LEQ  shift, and go to state 34
    GEQ  shift, and go to state 35
    '<'  shift, and go to state 36
    '>'  shift, and go to state 37
    '-'  shift, and go to state 38
    '+'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '^'  shift, and go to state 42
    ']'  shift, and go to state 113


state 111

    3 func_decl: FUNCTION VARTYPE VARIABLE '(' func_decl_args ')' block .

    $default  reduce using rule 3 (func_decl)


state 112

    6 func_decl_args: func_decl_args ',' var_decl .

    $default  reduce using rule 6 (func_decl_args)


state 113

   26 var_decl: VARIABLE '[' exp ']' . '=' exp

    '='  shift, and go to state 90
